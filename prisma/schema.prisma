generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ingredient {
  id                  Int                   @id @default(autoincrement())
  name                String?               @unique @db.Char(255)
  RecipeIngredients   RecipeIngredients[]
  ShoppingIngredients ShoppingIngredients[]
}

model Note {
  id        Int     @id @default(autoincrement())
  text      String?
  recipe_id Int
  Recipe    Recipe  @relation(fields: [recipe_id], references: [id], onDelete: Cascade)
}

model RecipeIngredients {
  recipe_id     Int
  ingredient_id Int
  Ingredient    Ingredient @relation(fields: [ingredient_id], references: [id], onDelete: Cascade)
  Recipe        Recipe     @relation(fields: [recipe_id], references: [id], onDelete: Cascade)

  @@id([recipe_id, ingredient_id])
}

model Recipe {
  id           Int                 @id @default(autoincrement())
  name         String?             @unique @db.Char(255)
  servings     Int?
  preptime     Int?
  cooktime     Int?
  instructions String?
  photourl     String?             @db.Char(255)
  notes        Note[]
  ingredients  RecipeIngredients[]
  tags         RecipeTags[]
}

model ShoppingList {
  id          Int                   @id @default(autoincrement())
  listName    String                @db.Char(255)
  ingredients ShoppingIngredients[]
}

model ShoppingIngredients {
  qty           Int?         @default(0)
  size          String?      @db.Char(255)
  Ingredient    Ingredient   @relation(fields: [ingredient_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ShoppingList  ShoppingList @relation(fields: [shopping_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shopping_id   Int
  ingredient_id Int

  @@id([shopping_id, ingredient_id])
}

model RecipeTags {
  id        Int     @id @default(autoincrement())
  Recipe    Recipe? @relation(fields: [recipe_id], references: [id], onDelete: Cascade)
  Tag       Tag?    @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  recipe_id Int?
  tag_id    Int?
}

model Tag {
  id      Int           @id @default(autoincrement())
  name     String       @unique @db.Char(255)
  Recipes RecipeTags[]
}
